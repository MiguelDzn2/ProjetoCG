---
description: 
globs: 
alwaysApply: true
---
# Project Structure

This document outlines the structure of the Computer Graphics project, explaining the purpose and organization of each component.

## Directory Structure

```
ProjetoCG/
├── core/                  # Core framework components
│   ├── base.py            # Base application class
│   ├── matrix.py          # Matrix transformation operations
│   ├── obj_reader2.py     # OBJ file parser
│   └── ...                # Other core utilities
│
├── core_ext/              # Extended core functionality
│   ├── camera.py          # Camera implementation
│   ├── mesh.py            # Mesh handling
│   ├── renderer.py        # Rendering pipeline
│   ├── scene.py           # Scene graph management
│   └── ...                # Other extensions
│
├── geometry/              # Geometric primitives and custom models
│   ├── miguelinstrument.py   # Miguel's instrument model
│   ├── zeinstrument.py       # Ze's instrument model
│   ├── anainstrument.py      # Ana's instrument model
│   ├── brandoninstrument.py  # Brandon's instrument model
│   ├── miguelOBJ.obj         # 3D model files
│   └── ...                   # Basic geometric shapes
│
├── material/              # Material definitions
│   ├── surface.py         # Surface material properties
│   └── texture.py         # Texture-based materials
│
├── extras/                # Additional utilities
│   ├── axes.py            # Axes visualization helper
│   ├── grid.py            # Grid visualization helper
│   └── movement_rig.py    # Movement controls for objects/camera
│
├── images/                # Texture images and other visual assets
│
├── .cursor/               # Cursor-specific configuration
│   └── rules/             # Cursor rules
│       ├── dependencies.mdc   # Dependencies documentation
│       ├── structure.mdc      # Project structure documentation
│       └── phases.mdc         # Game phases documentation
│
├── projeto.py             # Main application file
├── phase_explanation.md   # Detailed explanation of game phases
└── analysis.md            # Analysis of the project code
```

## Main Components

### Main Application File (`projeto.py`)

The main application file contains the `Example` class which inherits from `Base` and implements:
- Game phase management (Selection and Gameplay)
- Scene setup for both phases
- Input handling for both phases
- Camera and object movement control

### Core Framework

The core framework provides the foundation for the application:
- Application lifecycle management
- Input handling
- Mathematical operations
- File parsing

### Rendering System

The rendering system is built on:
- Object3D hierarchy for transformation management
- Scene graph for object organization
- Camera for view projection
- Mesh and materials for visual appearance

### Geometry System

The geometry system includes:
- Basic geometric primitives (box, sphere, etc.)
- Custom instrument models for each team member
- OBJ file loading capabilities

### Materials and Textures

The material system supports:
- Surface materials with adjustable properties
- Texture-based materials with image loading

### Movement Controls

Movement is implemented through:
- MovementRig class for hierarchical transformations
- Input mapping for keyboard controls
- Phase-specific input handling

## Architectural Patterns

The project follows several architectural patterns:
1. **Scene Graph**: Hierarchical organization of 3D objects
2. **Component-Based Design**: Objects composed of geometry and material components
3. **State Machine**: Phase management using enumeration states
4. **Input Observer**: Input events trigger appropriate responses
5. **Transformation Hierarchy**: Parent-child relationships for transformations

